// Initialize Firebase collections and default settings
const admin = require('firebase-admin');
const serviceAccount = require('../serviceAccountKey.json'); // You'll need to create this file

// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// Initialize default settings
async function initializeSettings() {
  try {
    console.log('Initializing default settings...');
    
    // Check if settings already exist
    const settingsCollection = collection(db, 'settings');
    const settingsSnapshot = await getDocs(settingsCollection);
    
    if (!settingsSnapshot.empty) {
      console.log('Settings already initialized. Skipping...');
      return;
    }
    
    // General settings
    await setDoc(doc(db, 'settings', 'general'), {
      gymName: 'Fitness Gym',
      address: '123 Fitness Street, Exercise City',
      phone: '+1 (555) 123-4567',
      email: 'info@fitnessgym.com',
      website: 'www.fitnessgym.com',
      openingHours: 'Monday-Friday: 6am-10pm, Saturday-Sunday: 8am-8pm',
      logoUrl: '',
      allowMemberRegistration: true,
      requireAdminApproval: true,
      maintenanceMode: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    // QR Code settings
    await setDoc(doc(db, 'settings', 'qrCode'), {
      defaultExpiryTime: 24,
      enableLocationVerification: true,
      defaultRadius: 100,
      allowMultipleScansPerDay: false,
      qrCodeSize: 300,
      autoGenerateDaily: false,
      autoGenerateTime: '06:00',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    // Notification settings
    await setDoc(doc(db, 'settings', 'notifications'), {
      enableEmailNotifications: true,
      enablePushNotifications: false,
      notifyOnNewMember: true,
      notifyOnMembershipExpiry: true,
      daysBeforeExpiryNotification: 7,
      notifyOnAttendance: false,
      adminEmailRecipients: [],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    // Security settings
    await setDoc(doc(db, 'settings', 'security'), {
      passwordMinLength: 8,
      requireSpecialChars: true,
      requireNumbers: true,
      requireUppercase: true,
      sessionTimeout: 30,
      maxLoginAttempts: 5,
      twoFactorAuth: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    // Backup settings
    await setDoc(doc(db, 'settings', 'backup'), {
      autoBackup: false,
      backupFrequency: 'weekly',
      lastBackupDate: null,
      backupEmail: '',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    console.log('Default settings initialized successfully!');
  } catch (error) {
    console.error('Error initializing settings:', error);
  }
}

// Create default admin user (only for first-time setup)
async function createDefaultAdmin() {
  try {
    console.log('Checking for existing admin users...');
    
    // Check if any users exist
    const usersCollection = collection(db, 'users');
    const usersSnapshot = await getDocs(usersCollection);
    
    if (!usersSnapshot.empty) {
      console.log('Users already exist. Skipping default admin creation...');
      return;
    }
    
    console.log('No users found. You should create an admin user through the registration process.');
    console.log('After registration, manually update the user role to "admin" in the Firestore console.');
  } catch (error) {
    console.error('Error checking for admin users:', error);
  }
}

// Initialize membership plans
async function initializeMembershipPlans() {
  try {
    console.log('Initializing default membership plans...');
    
    // Check if plans already exist
    const plansCollection = collection(db, 'membershipPlans');
    const plansSnapshot = await getDocs(plansCollection);
    
    if (!plansSnapshot.empty) {
      console.log('Membership plans already exist. Skipping...');
      return;
    }
    
    // Create default plans
    await setDoc(doc(db, 'membershipPlans', 'basic'), {
      name: 'Basic',
      description: 'Access to basic gym facilities',
      price: 29.99,
      duration: 30, // days
      features: [
        'Access to gym equipment',
        'Locker room access',
        'Standard operating hours'
      ],
      active: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    await setDoc(doc(db, 'membershipPlans', 'premium'), {
      name: 'Premium',
      description: 'Full access to all gym facilities and classes',
      price: 49.99,
      duration: 30, // days
      features: [
        'Access to all gym equipment',
        'Unlimited group classes',
        'Locker room access',
        'Extended hours access',
        'One free personal training session'
      ],
      active: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    await setDoc(doc(db, 'membershipPlans', 'annual'), {
      name: 'Annual',
      description: 'Full year access with premium benefits',
      price: 499.99,
      duration: 365, // days
      features: [
        'Access to all gym equipment',
        'Unlimited group classes',
        'Locker room access',
        '24/7 access',
        'Four free personal training sessions',
        'Bring a friend once a month'
      ],
      active: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    });
    
    console.log('Default membership plans initialized successfully!');
  } catch (error) {
    console.error('Error initializing membership plans:', error);
  }
}

// Run initialization functions
async function initialize() {
  try {
    await initializeSettings();
    await createDefaultAdmin();
    await initializeMembershipPlans();
    console.log('Firebase initialization complete!');
    process.exit(0);
  } catch (error) {
    console.error('Error during initialization:', error);
    process.exit(1);
  }
}

initialize();