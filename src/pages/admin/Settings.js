import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Paper,
  Box,
  Grid,
  Card,
  CardContent,
  TextField,
  Button,
  Switch,
  FormControlLabel,
  Divider,
  Alert,
  Snackbar,
  CircularProgress,
  Tabs,
  Tab,
  IconButton,
  InputAdornment,
  Tooltip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Chip
} from '@mui/material';
import {
  Save,
  Refresh,
  Settings as SettingsIcon,
  Security,
  Notifications,
  QrCode,
  LocationOn,
  AccessTime,
  Info,
  Delete,
  Add,
  Edit,
  Visibility,
  VisibilityOff,
  CloudUpload,
  Email,
  Phone,
  Backup,
  RestartAlt
} from '@mui/icons-material';
import { doc, getDoc, setDoc, updateDoc, collection, getDocs, deleteDoc, addDoc } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../../firebase';
import { useAuth } from '../../contexts/AuthContext';
import AdminLayout from '../../components/layouts/AdminLayout';

const Settings = () => {
  const { currentUser } = useAuth();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [tabValue, setTabValue] = useState(0);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });
  
  // General settings
  const [generalSettings, setGeneralSettings] = useState({
    gymName: '',
    address: '',
    phone: '',
    email: '',
    website: '',
    openingHours: '',
    logo: null,
    logoUrl: '',
    allowMemberRegistration: true,
    requireAdminApproval: true,
    maintenanceMode: false
  });
  
  // QR Code settings
  const [qrSettings, setQrSettings] = useState({
    defaultExpiryTime: 24,
    enableLocationVerification: true,
    defaultRadius: 100,
    allowMultipleScansPerDay: false,
    qrCodeSize: 300,
    autoGenerateDaily: false,
    autoGenerateTime: '06:00'
  });
  
  // Notification settings
  const [notificationSettings, setNotificationSettings] = useState({
    enableEmailNotifications: true,
    enablePushNotifications: false,
    notifyOnNewMember: true,
    notifyOnMembershipExpiry: true,
    daysBeforeExpiryNotification: 7,
    notifyOnAttendance: false,
    adminEmailRecipients: []
  });
  
  // Security settings
  const [securitySettings, setSecuritySettings] = useState({
    passwordMinLength: 8,
    requireSpecialChars: true,
    requireNumbers: true,
    requireUppercase: true,
    sessionTimeout: 30,
    maxLoginAttempts: 5,
    twoFactorAuth: false
  });
  
  // Backup settings
  const [backupSettings, setBackupSettings] = useState({
    autoBackup: false,
    backupFrequency: 'weekly',
    lastBackupDate: null,
    backupEmail: ''
  });
  
  // Dialog states
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [newEmail, setNewEmail] = useState('');
  const [resetDialogOpen, setResetDialogOpen] = useState(false);
  
  // Fetch settings when component mounts
  useEffect(() => {
    fetchSettings();
  }, []);
  
  // Fetch all settings from Firestore
  const fetchSettings = async () => {
    try {
      setLoading(true);
      
      // Fetch general settings
      const generalDoc = await getDoc(doc(db, 'settings', 'general'));
      if (generalDoc.exists()) {
        setGeneralSettings({
          ...generalSettings,
          ...generalDoc.data()
        });
      }
      
      // Fetch QR code settings
      const qrDoc = await getDoc(doc(db, 'settings', 'qrCode'));
      if (qrDoc.exists()) {
        setQrSettings({
          ...qrSettings,
          ...qrDoc.data()
        });
      }
      
      // Fetch notification settings
      const notificationDoc = await getDoc(doc(db, 'settings', 'notifications'));
      if (notificationDoc.exists()) {
        setNotificationSettings({
          ...notificationSettings,
          ...notificationDoc.data()
        });
      }
      
      // Fetch security settings
      const securityDoc = await getDoc(doc(db, 'settings', 'security'));
      if (securityDoc.exists()) {
        setSecuritySettings({
          ...securitySettings,
          ...securityDoc.data()
        });
      }
      
      // Fetch backup settings
      const backupDoc = await getDoc(doc(db, 'settings', 'backup'));
      if (backupDoc.exists()) {
        setBackupSettings({
          ...backupSettings,
          ...backupDoc.data()
        });
      }
      
    } catch (error) {
      console.error('Error fetching settings:', error);
      setSnackbar({
        open: true,
        message: 'Error fetching settings: ' + error.message,
        severity: 'error'
      });
    } finally {
      setLoading(false);
    }
  };
  
  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };
  
  // Handle general settings change
  const handleGeneralChange = (e) => {
    const { name, value, checked } = e.target;
    setGeneralSettings({
      ...generalSettings,
      [name]: name === 'allowMemberRegistration' || name === 'requireAdminApproval' || name === 'maintenanceMode' 
        ? checked 
        : value
    });
  };
  
  // Handle QR settings change
  const handleQRChange = (e) => {
    const { name, value, checked } = e.target;
    setQrSettings({
      ...qrSettings,
      [name]: name === 'enableLocationVerification' || name === 'allowMultipleScansPerDay' || name === 'autoGenerateDaily'
        ? checked
        : name === 'defaultExpiryTime' || name === 'defaultRadius' || name === 'qrCodeSize'
          ? parseInt(value)
          : value
    });
  };
  
  // Handle notification settings change
  const handleNotificationChange = (e) => {
    const { name, value, checked } = e.target;
    setNotificationSettings({
      ...notificationSettings,
      [name]: name === 'enableEmailNotifications' || name === 'enablePushNotifications' || 
              name === 'notifyOnNewMember' || name === 'notifyOnMembershipExpiry' || name === 'notifyOnAttendance'
        ? checked
        : name === 'daysBeforeExpiryNotification'
          ? parseInt(value)
          : value
    });
  };
  
  // Handle security settings change
  const handleSecurityChange = (e) => {
    const { name, value, checked } = e.target;
    setSecuritySettings({
      ...securitySettings,
      [name]: name === 'requireSpecialChars' || name === 'requireNumbers' || 
              name === 'requireUppercase' || name === 'twoFactorAuth'
        ? checked
        : name === 'passwordMinLength' || name === 'sessionTimeout' || name === 'maxLoginAttempts'
          ? parseInt(value)
          : value
    });
  };
  
  // Handle backup settings change
  const handleBackupChange = (e) => {
    const { name, value, checked } = e.target;
    setBackupSettings({
      ...backupSettings,
      [name]: name === 'autoBackup' ? checked : value
    });
  };
  
  // Handle logo file change
  const handleLogoChange = (e) => {
    if (e.target.files[0]) {
      setGeneralSettings({
        ...generalSettings,
        logo: e.target.files[0]
      });
    }
  };
  
  // Add email to recipients list
  const handleAddEmail = () => {
    if (newEmail && !notificationSettings.adminEmailRecipients.includes(newEmail)) {
      setNotificationSettings({
        ...notificationSettings,
        adminEmailRecipients: [...notificationSettings.adminEmailRecipients, newEmail]
      });
      setNewEmail('');
      setEmailDialogOpen(false);
    }
  };
  
  // Remove email from recipients list
  const handleRemoveEmail = (email) => {
    setNotificationSettings({
      ...notificationSettings,
      adminEmailRecipients: notificationSettings.adminEmailRecipients.filter(e => e !== email)
    });
  };
  
  // Save all settings
  const saveSettings = async () => {
    try {
      setSaving(true);
      
      // Upload logo if changed
      let logoUrl = generalSettings.logoUrl;
      if (generalSettings.logo) {
        const storageRef = ref(storage, `settings/logo_${Date.now()}`);
        await uploadBytes(storageRef, generalSettings.logo);
        logoUrl = await getDownloadURL(storageRef);
      }
      
      // Save general settings
      await setDoc(doc(db, 'settings', 'general'), {
        ...generalSettings,
        logoUrl,
        logo: null, // Don't store the file object
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      });
      
      // Save QR code settings
      await setDoc(doc(db, 'settings', 'qrCode'), {
        ...qrSettings,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      });
      
      // Save notification settings
      await setDoc(doc(db, 'settings', 'notifications'), {
        ...notificationSettings,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      });
      
      // Save security settings
      await setDoc(doc(db, 'settings', 'security'), {
        ...securitySettings,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      });
      
      // Save backup settings
      await setDoc(doc(db, 'settings', 'backup'), {
        ...backupSettings,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      });
      
      // Update general settings with new logo URL
      setGeneralSettings({
        ...generalSettings,
        logoUrl,
        logo: null
      });
      
      setSnackbar({
        open: true,
        message: 'Settings saved successfully',
        severity: 'success'
      });
    } catch (error) {
      console.error('Error saving settings:', error);
      setSnackbar({
        open: true,
        message: 'Error saving settings: ' + error.message,
        severity: 'error'
      });
    } finally {
      setSaving(false);
    }
  };
  
  // Reset settings to default
  const resetToDefault = async () => {
    try {
      setSaving(true);
      
      // Default general settings
      const defaultGeneral = {
        gymName: 'My Gym',
        address: '',
        phone: '',
        email: '',
        website: '',
        openingHours: '',
        logoUrl: '',
        allowMemberRegistration: true,
        requireAdminApproval: true,
        maintenanceMode: false,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      };
      
      // Default QR code settings
      const defaultQR = {
        defaultExpiryTime: 24,
        enableLocationVerification: true,
        defaultRadius: 100,
        allowMultipleScansPerDay: false,
        qrCodeSize: 300,
        autoGenerateDaily: false,
        autoGenerateTime: '06:00',
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      };
      
      // Default notification settings
      const defaultNotification = {
        enableEmailNotifications: true,
        enablePushNotifications: false,
        notifyOnNewMember: true,
        notifyOnMembershipExpiry: true,
        daysBeforeExpiryNotification: 7,
        notifyOnAttendance: false,
        adminEmailRecipients: [],
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      };
      
      // Default security settings
      const defaultSecurity = {
        passwordMinLength: 8,
        requireSpecialChars: true,
        requireNumbers: true,
        requireUppercase: true,
        sessionTimeout: 30,
        maxLoginAttempts: 5,
        twoFactorAuth: false,
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      };
      
      // Default backup settings
      const defaultBackup = {
        autoBackup: false,
        backupFrequency: 'weekly',
        lastBackupDate: null,
        backupEmail: '',
        updatedAt: new Date(),
        updatedBy: currentUser.uid
      };
      
      // Save default settings
      await setDoc(doc(db, 'settings', 'general'), defaultGeneral);
      await setDoc(doc(db, 'settings', 'qrCode'), defaultQR);
      await setDoc(doc(db, 'settings', 'notifications'), defaultNotification);
      await setDoc(doc(db, 'settings', 'security'), defaultSecurity);
      await setDoc(doc(db, 'settings', 'backup'), defaultBackup);
      
      // Update state
      setGeneralSettings(defaultGeneral);
      setQrSettings(defaultQR);
      setNotificationSettings(defaultNotification);
      setSecuritySettings(defaultSecurity);
      setBackupSettings(defaultBackup);
      
      setSnackbar({
        open: true,
        message: 'Settings reset to default values',
        severity: 'success'
      });
      
      setResetDialogOpen(false);
    } catch (error) {
      console.error('Error resetting settings:', error);
      setSnackbar({
        open: true,
        message: 'Error resetting settings: ' + error.message,
        severity: 'error'
      });
    } finally {
      setSaving(false);
    }
  };
  
  // Create backup of database
  const createBackup = async () => {
    try {
      setSaving(true);
      
      // In a real application, you would implement a cloud function to create a backup
      // For this demo, we'll just update the last backup date
      
      const now = new Date();
      
      await updateDoc(doc(db, 'settings', 'backup'), {
        lastBackupDate: now,
        updatedAt: now,
        updatedBy: currentUser.uid
      });
      
      setBackupSettings({
        ...backupSettings,
        lastBackupDate: now
      });
      
      setSnackbar({
        open: true,
        message: 'Backup created successfully',
        severity: 'success'
      });
    } catch (error) {
      console.error('Error creating backup:', error);
      setSnackbar({
        open: true,
        message: 'Error creating backup: ' + error.message,
        severity: 'error'
      });
    } finally {
      setSaving(false);
    }
  };
  
  // Render loading state
  if (loading) {
    return (
      <AdminLayout>
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
            <CircularProgress />
          </Box>
        </Container>
      </AdminLayout>
    );
  }
  
  return (
    <AdminLayout>
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Typography variant="h4" gutterBottom>
            System Settings
          </Typography>
          <Box>
            <Button
              variant="contained"
              color="primary"
              startIcon={<Save />}
              onClick={saveSettings}
              disabled={saving}
              sx={{ mr: 1 }}
            >
              {saving ? 'Saving...' : 'Save Settings'}
            </Button>
            <Button
              variant="outlined"
              startIcon={<Refresh />}
              onClick={fetchSettings}
              disabled={saving}
            >
              Refresh
            </Button>
          </Box>
        </Box>
        
        <Paper sx={{ mb: 3 }} elevation={3}>
          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
            <Tabs value={tabValue} onChange={handleTabChange} aria-label="settings tabs">
              <Tab icon={<SettingsIcon />} label="General" />
              <Tab icon={<QrCode />} label="QR Code" />
              <Tab icon={<Notifications />} label="Notifications" />
              <Tab icon={<Security />} label="Security" />
              <Tab icon={<Backup />} label="Backup & Restore" />
            </Tabs>
          </Box>
          
          {/* General Settings Tab */}
          {tabValue === 0 && (
            <Box sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                General Settings
              </Typography>
              <Typography variant="body2" color="textSecondary" paragraph>
                Configure basic information about your gym and application settings.
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Gym Name"
                    name="gymName"
                    value={generalSettings.gymName}
                    onChange={handleGeneralChange}
                    margin="normal"
                  />
                  
                  <TextField
                    fullWidth
                    label="Address"
                    name="address"
                    value={generalSettings.address}
                    onChange={handleGeneralChange}
                    margin="normal"
                    multiline
                    rows={2}
                  />
                  
                  <TextField
                    fullWidth
                    label="Phone Number"
                    name="phone"
                    value={generalSettings.phone}
                    onChange={handleGeneralChange}
                    margin="normal"
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <Phone fontSize="small" />
                        </InputAdornment>
                      ),
                    }}
                  />
                  
                  <TextField
                    fullWidth
                    label="Email Address"
                    name="email"
                    type="email"
                    value={generalSettings.email}
                    onChange={handleGeneralChange}
                    margin="normal"
                    InputProps={{
                      startAdornment: (
                        <InputAdornment position="start">
                          <Email fontSize="small" />
                        </InputAdornment>
                      ),
                    }}
                  />
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Website"
                    name="website"
                    value={generalSettings.website}
                    onChange={handleGeneralChange}
                    margin="normal"
                  />
                  
                  <TextField
                    fullWidth
                    label="Opening Hours"
                    name="openingHours"
                    value={generalSettings.openingHours}
                    onChange={handleGeneralChange}
                    margin="normal"
                    placeholder="e.g. Mon-Fri: 6am-10pm, Sat-Sun: 8am-8pm"
                  />
                  
                  <Box sx={{ mt: 2, mb: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      Gym Logo
                    </Typography>
                    
                    {generalSettings.logoUrl && (
                      <Box sx={{ mb: 2 }}>
                        <img 
                          src={generalSettings.logoUrl} 
                          alt="Gym Logo" 
                          style={{ maxWidth: '100%', maxHeight: '100px' }} 
                        />
                      </Box>
                    )}
                    
                    <Button
                      variant="outlined"
                      component="label"
                      startIcon={<CloudUpload />}
                    >
                      Upload Logo
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={handleLogoChange}
                      />
                    </Button>
                    {generalSettings.logo && (
                      <Typography variant="caption" display="block">
                        Selected: {generalSettings.logo.name}
                      </Typography>
                    )}
                  </Box>
                </Grid>
                
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  <Typography variant="subtitle1" gutterBottom>
                    Application Settings
                  </Typography>
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={generalSettings.allowMemberRegistration}
                        onChange={handleGeneralChange}
                        name="allowMemberRegistration"
                        color="primary"
                      />
                    }
                    label="Allow Member Self-Registration"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={generalSettings.requireAdminApproval}
                        onChange={handleGeneralChange}
                        name="requireAdminApproval"
                        color="primary"
                      />
                    }
                    label="Require Admin Approval for New Members"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={generalSettings.maintenanceMode}
                        onChange={handleGeneralChange}
                        name="maintenanceMode"
                        color="primary"
                      />
                    }
                    label="Maintenance Mode"
                  />
                  
                  {generalSettings.maintenanceMode && (
                    <Alert severity="warning" sx={{ mt: 1 }}>
                      When maintenance mode is enabled, only administrators can access the system.
                    </Alert>
                  )}
                </Grid>
              </Grid>
            </Box>
          )}
          
          {/* QR Code Settings Tab */}
          {tabValue === 1 && (
            <Box sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                QR Code Settings
              </Typography>
              <Typography variant="body2" color="textSecondary" paragraph>
                Configure how QR codes are generated and validated for attendance.
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Default Expiry Time (hours)"
                    name="defaultExpiryTime"
                    type="number"
                    value={qrSettings.defaultExpiryTime}
                    onChange={handleQRChange}
                    margin="normal"
                    InputProps={{
                      endAdornment: <InputAdornment position="end">hours</InputAdornment>,
                    }}
                  />
                  
                  <TextField
                    fullWidth
                    label="QR Code Size"
                    name="qrCodeSize"
                    type="number"
                    value={qrSettings.qrCodeSize}
                    onChange={handleQRChange}
                    margin="normal"
                    InputProps={{
                      endAdornment: <InputAdornment position="end">pixels</InputAdornment>,
                    }}
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={qrSettings.autoGenerateDaily}
                        onChange={handleQRChange}
                        name="autoGenerateDaily"
                        color="primary"
                      />
                    }
                    label="Auto-Generate QR Code Daily"
                  />
                  
                  {qrSettings.autoGenerateDaily && (
                    <TextField
                      fullWidth
                      label="Auto-Generate Time"
                      name="autoGenerateTime"
                      type="time"
                      value={qrSettings.autoGenerateTime}
                      onChange={handleQRChange}
                      margin="normal"
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <AccessTime fontSize="small" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  )}
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={qrSettings.enableLocationVerification}
                        onChange={handleQRChange}
                        name="enableLocationVerification"
                        color="primary"
                      />
                    }
                    label="Enable Location Verification"
                  />
                  
                  {qrSettings.enableLocationVerification && (
                    <TextField
                      fullWidth
                      label="Default Radius"
                      name="defaultRadius"
                      type="number"
                      value={qrSettings.defaultRadius}
                      onChange={handleQRChange}
                      margin="normal"
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <LocationOn fontSize="small" />
                          </InputAdornment>
                        ),
                        endAdornment: <InputAdornment position="end">meters</InputAdornment>,
                      }}
                    />
                  )}
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={qrSettings.allowMultipleScansPerDay}
                        onChange={handleQRChange}
                        name="allowMultipleScansPerDay"
                        color="primary"
                      />
                    }
                    label="Allow Multiple Check-ins Per Day"
                  />
                  
                  {!qrSettings.allowMultipleScansPerDay && (
                    <Alert severity="info" sx={{ mt: 1 }}>
                      Members will only be able to check in once per day.
                    </Alert>
                  )}
                </Grid>
              </Grid>
            </Box>
          )}
          
          {/* Notification Settings Tab */}
          {tabValue === 2 && (
            <Box sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                Notification Settings
              </Typography>
              <Typography variant="body2" color="textSecondary" paragraph>
                Configure how and when notifications are sent to admins and members.
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={notificationSettings.enableEmailNotifications}
                        onChange={handleNotificationChange}
                        name="enableEmailNotifications"
                        color="primary"
                      />
                    }
                    label="Enable Email Notifications"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={notificationSettings.enablePushNotifications}
                        onChange={handleNotificationChange}
                        name="enablePushNotifications"
                        color="primary"
                      />
                    }
                    label="Enable Push Notifications"
                  />
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Typography variant="subtitle1" gutterBottom>
                    Admin Notifications
                  </Typography>
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={notificationSettings.notifyOnNewMember}
                        onChange={handleNotificationChange}
                        name="notifyOnNewMember"
                        color="primary"
                      />
                    }
                    label="Notify on New Member Registration"
                  />
                  
                  <Box sx={{ mt: 2 }}>
                    <Typography variant="subtitle2" gutterBottom>
                      Admin Email Recipients
                    </Typography>
                    
                    <List dense>
                      {notificationSettings.adminEmailRecipients.length > 0 ? (
                        notificationSettings.adminEmailRecipients.map((email, index) => (
                          <ListItem key={index}>
                            <ListItemText primary={email} />
                            <ListItemSecondaryAction>
                              <IconButton edge="end" onClick={() => handleRemoveEmail(email)} size="small">
                                <Delete fontSize="small" />
                              </IconButton>
                            </ListItemSecondaryAction>
                          </ListItem>
                        ))
                      ) : (
                        <ListItem>
                          <ListItemText primary="No recipients added" secondary="Add email addresses to receive admin notifications" />
                        </ListItem>
                      )}
                    </List>
                    
                    <Button
                      variant="outlined"
                      startIcon={<Add />}
                      onClick={() => setEmailDialogOpen(true)}
                      size="small"
                      sx={{ mt: 1 }}
                    >
                      Add Email
                    </Button>
                  </Box>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom>
                    Member Notifications
                  </Typography>
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={notificationSettings.notifyOnMembershipExpiry}
                        onChange={handleNotificationChange}
                        name="notifyOnMembershipExpiry"
                        color="primary"
                      />
                    }
                    label="Notify Members Before Membership Expiry"
                  />
                  
                  {notificationSettings.notifyOnMembershipExpiry && (
                    <TextField
                      fullWidth
                      label="Days Before Expiry"
                      name="daysBeforeExpiryNotification"
                      type="number"
                      value={notificationSettings.daysBeforeExpiryNotification}
                      onChange={handleNotificationChange}
                      margin="normal"
                      InputProps={{
                        endAdornment: <InputAdornment position="end">days</InputAdornment>,
                      }}
                    />
                  )}
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={notificationSettings.notifyOnAttendance}
                        onChange={handleNotificationChange}
                        name="notifyOnAttendance"
                        color="primary"
                      />
                    }
                    label="Notify Members on Successful Check-in"
                  />
                </Grid>
              </Grid>
            </Box>
          )}
          
          {/* Security Settings Tab */}
          {tabValue === 3 && (
            <Box sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                Security Settings
              </Typography>
              <Typography variant="body2" color="textSecondary" paragraph>
                Configure security and authentication settings for your application.
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom>
                    Password Requirements
                  </Typography>
                  
                  <TextField
                    fullWidth
                    label="Minimum Password Length"
                    name="passwordMinLength"
                    type="number"
                    value={securitySettings.passwordMinLength}
                    onChange={handleSecurityChange}
                    margin="normal"
                    InputProps={{
                      endAdornment: <InputAdornment position="end">characters</InputAdornment>,
                    }}
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={securitySettings.requireSpecialChars}
                        onChange={handleSecurityChange}
                        name="requireSpecialChars"
                        color="primary"
                      />
                    }
                    label="Require Special Characters"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={securitySettings.requireNumbers}
                        onChange={handleSecurityChange}
                        name="requireNumbers"
                        color="primary"
                      />
                    }
                    label="Require Numbers"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={securitySettings.requireUppercase}
                        onChange={handleSecurityChange}
                        name="requireUppercase"
                        color="primary"
                      />
                    }
                    label="Require Uppercase Letters"
                  />
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom>
                    Session & Authentication
                  </Typography>
                  
                  <TextField
                    fullWidth
                    label="Session Timeout"
                    name="sessionTimeout"
                    type="number"
                    value={securitySettings.sessionTimeout}
                    onChange={handleSecurityChange}
                    margin="normal"
                    InputProps={{
                      endAdornment: <InputAdornment position="end">minutes</InputAdornment>,
                    }}
                  />
                  
                  <TextField
                    fullWidth
                    label="Max Login Attempts"
                    name="maxLoginAttempts"
                    type="number"
                    value={securitySettings.maxLoginAttempts}
                    onChange={handleSecurityChange}
                    margin="normal"
                    helperText="After this many failed attempts, account will be temporarily locked"
                  />
                  
                  <FormControlLabel
                    control={
                      <Switch
                        checked={securitySettings.twoFactorAuth}
                        onChange={handleSecurityChange}
                        name="twoFactorAuth"
                        color="primary"
                      />
                    }
                    label="Enable Two-Factor Authentication"
                  />
                  
                  {securitySettings.twoFactorAuth && (
                    <Alert severity="info" sx={{ mt: 1 }}>
                      Two-factor authentication will be required for all admin accounts.
                    </Alert>
                  )}
                </Grid>
              </Grid>
            </Box>
          )}
          
          {/* Backup & Restore Tab */}
          {tabValue === 4 && (
            <Box sx={{ p: 3 }}>
              <Typography variant="h6" gutterBottom>
                Backup & Restore
              </Typography>
              <Typography variant="body2" color="textSecondary" paragraph>
                Configure database backup settings and restore options.
              </Typography>
              
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card sx={{ mb: 3 }}>
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom>
                        Manual Backup
                      </Typography>
                      
                      <Typography variant="body2" paragraph>
                        Create a manual backup of your database. This will export all your data to a secure file.
                      </Typography>
                      
                      <Button
                        variant="contained"
                        color="primary"
                        startIcon={<Backup />}
                        onClick={createBackup}
                        disabled={saving}
                      >
                        Create Backup Now
                      </Button>
                      
                      {backupSettings.lastBackupDate && (
                        <Typography variant="body2" color="textSecondary" sx={{ mt: 2 }}>
                          Last backup: {new Date(backupSettings.lastBackupDate.seconds * 1000).toLocaleString()}
                        </Typography>
                      )}
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom color="error">
                        Reset Settings
                      </Typography>
                      
                      <Typography variant="body2" paragraph>
                        Reset all settings to their default values. This action cannot be undone.
                      </Typography>
                      
                      <Button
                        variant="outlined"
                        color="error"
                        startIcon={<RestartAlt />}
                        onClick={() => setResetDialogOpen(true)}
                      >
                        Reset to Default
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
                
                <Grid item xs={12} md={6}>
                  <Card>
                    <CardContent>
                      <Typography variant="subtitle1" gutterBottom>
                        Automatic Backup
                      </Typography>
                      
                      <FormControlLabel
                        control={
                          <Switch
                            checked={backupSettings.autoBackup}
                            onChange={handleBackupChange}
                            name="autoBackup"
                            color="primary"
                          />
                        }
                        label="Enable Automatic Backups"
                      />
                      
                      {backupSettings.autoBackup && (
                        <>
                          <FormControl fullWidth margin="normal">
                            <InputLabel>Backup Frequency</InputLabel>
                            <Select
                              value={backupSettings.backupFrequency}
                              label="Backup Frequency"
                              name="backupFrequency"
                              onChange={handleBackupChange}
                            >
                              <MenuItem value="daily">Daily</MenuItem>
                              <MenuItem value="weekly">Weekly</MenuItem>
                              <MenuItem value="monthly">Monthly</MenuItem>
                            </Select>
                          </FormControl>
                          
                          <TextField
                            fullWidth
                            label="Backup Email Recipient"
                            name="backupEmail"
                            type="email"
                            value={backupSettings.backupEmail}
                            onChange={handleBackupChange}
                            margin="normal"
                            helperText="Email address to receive backup notifications"
                          />
                        </>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          )}
        </Paper>
      </Container>
      
      {/* Add Email Dialog */}
      <Dialog open={emailDialogOpen} onClose={() => setEmailDialogOpen(false)}>
        <DialogTitle>Add Email Recipient</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Enter an email address to receive admin notifications.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            label="Email Address"
            type="email"
            fullWidth
            value={newEmail}
            onChange={(e) => setNewEmail(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEmailDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleAddEmail} color="primary">
            Add
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Reset Confirmation Dialog */}
      <Dialog open={resetDialogOpen} onClose={() => setResetDialogOpen(false)}>
        <DialogTitle>Reset Settings</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to reset all settings to their default values? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setResetDialogOpen(false)}>Cancel</Button>
          <Button onClick={resetToDefault} color="error">
            Reset
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Snackbar for notifications */}
      <Snackbar 
        open={snackbar.open} 
        autoHideDuration={6000} 
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert 
          onClose={() => setSnackbar({ ...snackbar, open: false })} 
          severity={snackbar.severity} 
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </AdminLayout>
  );
};

export default Settings;